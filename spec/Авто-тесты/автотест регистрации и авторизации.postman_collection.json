{
	"info": {
		"_postman_id": "b4c33c63-2962-44bd-8c3e-940ff2d8aa18",
		"name": "автотест регистрации и авторизации",
		"description": "`Автотесты для стратегии`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "49544047",
		"_collection_link": "https://daniilkochin-1601563.postman.co/workspace/daniilkochin's-Workspace~2e14a9b3-6156-4ea8-816c-38016c7f9619/collection/49544047-b4c33c63-2962-44bd-8c3e-940ff2d8aa18?action=share&source=collection_link&creator=49544047"
	},
	"item": [
		{
			"name": "регистрация - Positive Test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// === ТЕСТЫ ДЛЯ РЕГИСТРАЦИИ ===\r",
							"\r",
							"// 1. Проверка что сервер отвечает\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Проверка что ответ в формате JSON\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// 3. Проверка базовой структуры ответа API\r",
							"pm.test(\"Response has correct API structure\", function () {\r",
							"    const result = pm.response.json();\r",
							"    pm.expect(result).to.be.an('object');\r",
							"    pm.expect(result).to.have.property('result');\r",
							"    pm.expect(['ok', 'error']).to.include(result.result);\r",
							"});\r",
							"\r",
							"// 4. Если регистрация успешна\r",
							"if (pm.response.json().result === 'ok') {\r",
							"    \r",
							"    // 4.1 Проверяем структуру данных пользователя\r",
							"    pm.test(\"Successful registration - user data structure\", function () {\r",
							"        const resultData = pm.response.json().data;\r",
							"        \r",
							"        pm.expect(resultData).to.have.property('id');\r",
							"        pm.expect(resultData).to.have.property('token');\r",
							"        pm.expect(resultData).to.have.property('name');\r",
							"        \r",
							"        // Проверяем типы данных\r",
							"        pm.expect(resultData.id).to.be.a('number');\r",
							"        pm.expect(resultData.token).to.be.a('string');\r",
							"        pm.expect(resultData.name).to.be.a('string');\r",
							"        \r",
							"        // Проверяем что ID положительный\r",
							"        pm.expect(resultData.id).to.be.above(0);\r",
							"        \r",
							"        // Проверяем что токен не пустой\r",
							"        pm.expect(resultData.token.length).to.be.above(10);\r",
							"    });\r",
							"    \r",
							"    // 4.2 Сохраняем токен для других запросов\r",
							"    pm.test(\"Save auth token for future requests\", function () {\r",
							"        const token = pm.response.json().data.token;\r",
							"        const userId = pm.response.json().data.id;\r",
							"        \r",
							"        if (token && token.length > 10) {\r",
							"            pm.collectionVariables.set(\"auth_token\", token);\r",
							"            pm.collectionVariables.set(\"user_id\", userId.toString());\r",
							"            console.log(\"Token saved: \", token.substring(0, 20) + \"...\");\r",
							"            console.log(\"User ID saved: \", userId);\r",
							"        }\r",
							"    });\r",
							"    \r",
							"} \r",
							"// 5. Если регистрация неуспешна (ошибка)\r",
							"else if (pm.response.json().result === 'error') {\r",
							"    \r",
							"    // 5.1 Проверяем структуру ошибки\r",
							"    pm.test(\"Error response structure\", function () {\r",
							"        const error = pm.response.json().error;\r",
							"        \r",
							"        pm.expect(error).to.have.property('code');\r",
							"        pm.expect(error).to.have.property('text');\r",
							"        \r",
							"        pm.expect(error.code).to.be.a('number');\r",
							"        pm.expect(error.text).to.be.a('string');\r",
							"    });\r",
							"    \r",
							"    // 5.2 Проверяем конкретные коды ошибок\r",
							"    pm.test(\"Error code is expected\", function () {\r",
							"        const errorCode = pm.response.json().error.code;\r",
							"        const expectedErrorCodes = [1001, 1004, 1007, 1008, 1009, 1010, 1090, 1916]; // Добавил 1916 из вашего ответа\r",
							"        \r",
							"        pm.expect(expectedErrorCodes).to.include(errorCode);\r",
							"    });\r",
							"}\r",
							"\r",
							"// 6. Проверка производительности\r",
							"pm.test(\"Response time is under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 7. Проверка заголовков\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// 8. Выводим информацию в консоль для отладки\r",
							"console.log(\"Response status: \", pm.response.code);\r",
							"console.log(\"Response result: \", pm.response.json().result);\r",
							"console.log(\"Full result: \", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}?method=registration&login=Daniel241&hash=0f1096f341110f3b4ea0cc256b274a82&name=donisimo",
					"host": [
						"{{base_url}}"
					],
					"query": [
						{
							"key": "method",
							"value": "registration"
						},
						{
							"key": "login",
							"value": "Daniel241"
						},
						{
							"key": "hash",
							"value": "0f1096f341110f3b4ea0cc256b274a82"
						},
						{
							"key": "name",
							"value": "donisimo"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "авторизация",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// === ТЕСТЫ ДЛЯ АВТОРИЗАЦИИ ===\r",
							"// Генерируем случайное число для предотвращения кеширования\r",
							"const randomNumber = Math.floor(Math.random() * 1000000);\r",
							"pm.collectionVariables.set(\"rnd\", randomNumber);\r",
							"console.log(\"Generated rnd: \" + randomNumber);\r",
							"\r",
							"// 1. Проверка что сервер отвечает\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Проверка что ответ в формате JSON\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// 3. Проверка базовой структуры ответа API\r",
							"pm.test(\"Response has correct API structure\", function () {\r",
							"    const result = pm.response.json();\r",
							"    pm.expect(result).to.be.an('object');\r",
							"    pm.expect(result).to.have.property('result');\r",
							"    pm.expect(['ok', 'error']).to.include(result.result);\r",
							"});\r",
							"\r",
							"// 4. Если авторизация успешна\r",
							"if (pm.response.json().result === 'ok') {\r",
							"    \r",
							"    // 4.1 Проверяем структуру данных пользователя\r",
							"    pm.test(\"Successful login - user data structure\", function () {\r",
							"        const resultData = pm.response.json().data;\r",
							"        \r",
							"        pm.expect(resultData).to.have.property('id');\r",
							"        pm.expect(resultData).to.have.property('token');\r",
							"        pm.expect(resultData).to.have.property('name');\r",
							"        \r",
							"        // Проверяем типы данных\r",
							"        pm.expect(resultData.id).to.be.a('number');\r",
							"        pm.expect(resultData.token).to.be.a('string');\r",
							"        pm.expect(resultData.name).to.be.a('string');\r",
							"        \r",
							"        // Проверяем что ID положительный\r",
							"        pm.expect(resultData.id).to.be.above(0);\r",
							"        \r",
							"        // Проверяем что токен не пустой\r",
							"        pm.expect(resultData.token.length).to.be.above(10);\r",
							"    });\r",
							"    \r",
							"    // 4.2 Сохраняем токен для других запросов\r",
							"    pm.test(\"Save auth token for future requests\", function () {\r",
							"        const token = pm.response.json().data.token;\r",
							"        const userId = pm.response.json().data.id;\r",
							"        const userName = pm.response.json().data.name;\r",
							"        \r",
							"        if (token && token.length > 10) {\r",
							"            pm.collectionVariables.set(\"auth_token\", token);\r",
							"            pm.collectionVariables.set(\"user_id\", userId.toString());\r",
							"            pm.collectionVariables.set(\"user_name\", userName);\r",
							"            console.log(\"Token saved: \", token.substring(0, 20) + \"...\");\r",
							"            console.log(\"User ID saved: \", userId);\r",
							"            console.log(\"User name saved: \", userName);\r",
							"        }\r",
							"    });\r",
							"    \r",
							"} \r",
							"// 5. Если авторизация неуспешна (ошибка)\r",
							"else if (pm.response.json().result === 'error') {\r",
							"    \r",
							"    // 5.1 Проверяем структуру ошибки\r",
							"    pm.test(\"Error response structure\", function () {\r",
							"        const error = pm.response.json().error;\r",
							"        \r",
							"        pm.expect(error).to.have.property('code');\r",
							"        pm.expect(error).to.have.property('text');\r",
							"        \r",
							"        pm.expect(error.code).to.be.a('number');\r",
							"        pm.expect(error.text).to.be.a('string');\r",
							"    });\r",
							"    \r",
							"    // 5.2 Проверяем конкретные коды ошибок для авторизации\r",
							"    pm.test(\"Error code is expected for login\", function () {\r",
							"        const errorCode = pm.response.json().error.code;\r",
							"        const expectedErrorCodes = [1002, 1005, 1016, 242, 705];\r",
							"        // 1002 - Wrong login or password\r",
							"        // 1005 - User is no exists\r",
							"        // 1016 - params login or password not set\r",
							"        // 242 - Params not set fully\r",
							"        // 705 - User is not found\r",
							"        \r",
							"        pm.expect(expectedErrorCodes).to.include(errorCode);\r",
							"    });\r",
							"    \r",
							"    // 5.3 Проверяем текст ошибки при неверных credentials\r",
							"    pm.test(\"Check wrong credentials error\", function () {\r",
							"        const errorCode = pm.response.json().error.code;\r",
							"        if (errorCode === 1002) {\r",
							"            const errorText = pm.response.json().error.text;\r",
							"            pm.expect(errorText).to.equal(\"Wrong login or password\");\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"// 6. Проверка производительности\r",
							"pm.test(\"Response time is under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 7. Проверка заголовков\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// 8. Выводим информацию в консоль для отладки\r",
							"console.log(\"Response status: \", pm.response.code);\r",
							"console.log(\"Response result: \", pm.response.json().result);\r",
							"console.log(\"Full result: \", pm.response.json());\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}?method=login&login=Daniel241&hash=1cec31f303628aa42686bcc45f99815c&rnd=6",
					"host": [
						"{{base_url}}"
					],
					"query": [
						{
							"key": "method",
							"value": "login"
						},
						{
							"key": "login",
							"value": "Daniel241"
						},
						{
							"key": "hash",
							"value": "1cec31f303628aa42686bcc45f99815c"
						},
						{
							"key": "rnd",
							"value": "6"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"// Выполняется перед КАЖДЫМ запросом в коллекции\r",
					"if (pm.info.iteration === 0) {\r",
					"    // Первая итерация - создаем тестового пользователя\r",
					"    const testId = new Date().getTime();\r",
					"    pm.collectionVariables.set(\"test_login\", `User${testId}`);\r",
					"    pm.collectionVariables.set(\"test_password\", `Pass${testId}`);\r",
					"}\r",
					"\r",
					"// Для каждого запроса обновляем rnd и hash\r",
					"const login = pm.collectionVariables.get(\"test_login\");\r",
					"const password = pm.collectionVariables.get(\"test_password\");\r",
					"const rnd = Math.floor(Math.random() * 1000000);\r",
					"\r",
					"const firstHash = CryptoJS.MD5(login + password).toString();\r",
					"const finalHash = CryptoJS.MD5(firstHash + rnd).toString();\r",
					"\r",
					"pm.collectionVariables.set(\"current_rnd\", rnd);\r",
					"pm.collectionVariables.set(\"current_hash\", finalHash);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": ""
		},
		{
			"key": "auth_token",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "rnd",
			"value": ""
		},
		{
			"key": "user_name",
			"value": ""
		},
		{
			"key": "current_rnd",
			"value": ""
		},
		{
			"key": "current_hash",
			"value": ""
		},
		{
			"key": "test_login",
			"value": ""
		},
		{
			"key": "test_password",
			"value": ""
		}
	]
}